# Pipeline de Infraestrutura - Tiro Esportivo Brasileiro
# TIROESPORTIVOBRASILEIRO.COM.BR
# Infrastructure as Code (IaC) Pipeline

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - infrastructure/*
    - azure-devops/infrastructure-pipeline.yml

pr: none

variables:
  # Configura√ß√µes do projeto
  subscriptionId: '130706ec-b9d5-4554-8be1-ef855c2cf41a'
  resourceGroupName: 'tiroesportivo'
  location: 'East US'
  domainName: 'tiroesportivobrasileiro.com.br'
  
  # Configura√ß√µes Azure
  azureSubscription: 'Azure-Connection'
  
  # Configura√ß√µes de infraestrutura
  appServicePlan: 'tiroesportivo-plan'
  webAppName: 'tiroesportivobrasileiro'
  webAppNameDev: 'tiroesportivobrasileiro-dev'
  sku: 'S1'

stages:
- stage: ValidateInfrastructure
  displayName: 'Validate Infrastructure'
  jobs:
  - job: ValidateTemplates
    displayName: 'Validate ARM Templates'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Validando templates de infraestrutura..."
          
          # Validar se Resource Group existe
          if ! az group show --name $(resourceGroupName) &> /dev/null; then
            echo "Resource Group $(resourceGroupName) n√£o existe. Ser√° criado."
          else
            echo "‚úÖ Resource Group $(resourceGroupName) j√° existe."
          fi
          
          # Validar configura√ß√µes DNS
          echo "Verificando configura√ß√µes DNS..."
          if az network dns zone show --resource-group $(resourceGroupName) --name $(domainName) &> /dev/null; then
            echo "‚úÖ DNS Zone $(domainName) j√° existe."
            
            # Listar Name Servers
            echo "Name Servers atuais:"
            az network dns zone show --resource-group $(resourceGroupName) --name $(domainName) --query "nameServers" -o table
          else
            echo "DNS Zone $(domainName) n√£o existe. Ser√° criada."
          fi
          
          # Validar App Service Plan
          if az appservice plan show --name $(appServicePlan) --resource-group $(resourceGroupName) &> /dev/null; then
            echo "‚úÖ App Service Plan $(appServicePlan) j√° existe."
          else
            echo "App Service Plan $(appServicePlan) n√£o existe. Ser√° criado."
          fi
      displayName: 'Validate Current Infrastructure'

- stage: DeployInfrastructure
  displayName: 'Deploy Infrastructure'
  dependsOn: ValidateInfrastructure
  jobs:
  - deployment: DeployInfra
    displayName: 'Deploy Infrastructure Components'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'infrastructure'
    
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "üèóÔ∏è Criando infraestrutura base..."
                
                # 1. Criar Resource Group
                echo "Criando Resource Group..."
                az group create \
                  --name $(resourceGroupName) \
                  --location "$(location)" \
                  --tags \
                    Project="TiroEsportivoBrasileiro" \
                    Environment="Production" \
                    Owner="DevOps" \
                    CostCenter="IT"
                
                # 2. Criar DNS Zone
                echo "Criando DNS Zone..."
                if ! az network dns zone show --resource-group $(resourceGroupName) --name $(domainName) &> /dev/null; then
                  az network dns zone create \
                    --resource-group $(resourceGroupName) \
                    --name $(domainName) \
                    --tags \
                      Project="TiroEsportivoBrasileiro" \
                      Environment="Production"
                  
                  echo "‚úÖ DNS Zone criada com sucesso!"
                  
                  # Obter e exibir Name Servers
                  echo "üìã Name Servers (configure no registrador do dom√≠nio):"
                  az network dns zone show \
                    --resource-group $(resourceGroupName) \
                    --name $(domainName) \
                    --query "nameServers" -o table
                else
                  echo "‚úÖ DNS Zone j√° existe."
                fi
                
                # 3. Criar registros DNS b√°sicos
                echo "Configurando registros DNS b√°sicos..."
                
                # Registro CNAME para www
                if ! az network dns record-set cname show --resource-group $(resourceGroupName) --zone-name $(domainName) --name "www" &> /dev/null; then
                  az network dns record-set cname create \
                    --resource-group $(resourceGroupName) \
                    --zone-name $(domainName) \
                    --name "www" \
                    --ttl 3600
                  
                  az network dns record-set cname set-record \
                    --resource-group $(resourceGroupName) \
                    --zone-name $(domainName) \
                    --record-set-name "www" \
                    --cname $(domainName)
                  
                  echo "‚úÖ Registro CNAME para www criado."
                fi
                
                # Registro TXT para verifica√ß√£o
                if ! az network dns record-set txt show --resource-group $(resourceGroupName) --zone-name $(domainName) --name "@" &> /dev/null; then
                  az network dns record-set txt create \
                    --resource-group $(resourceGroupName) \
                    --zone-name $(domainName) \
                    --name "@" \
                    --ttl 3600
                  
                  az network dns record-set txt add-record \
                    --resource-group $(resourceGroupName) \
                    --zone-name $(domainName) \
                    --record-set-name "@" \
                    --value "v=spf1 -all"
                  
                  echo "‚úÖ Registro TXT b√°sico criado."
                fi
                
                # 4. Criar App Service Plan
                echo "Criando App Service Plan..."
                if ! az appservice plan show --name $(appServicePlan) --resource-group $(resourceGroupName) &> /dev/null; then
                  az appservice plan create \
                    --name $(appServicePlan) \
                    --resource-group $(resourceGroupName) \
                    --location "$(location)" \
                    --sku $(sku) \
                    --is-linux \
                    --tags \
                      Project="TiroEsportivoBrasileiro" \
                      Environment="Production"
                  
                  echo "‚úÖ App Service Plan criado com sucesso!"
                else
                  echo "‚úÖ App Service Plan j√° existe."
                fi
                
                # 5. Criar Web App de Produ√ß√£o
                echo "Criando Web App de produ√ß√£o..."
                if ! az webapp show --name $(webAppName) --resource-group $(resourceGroupName) &> /dev/null; then
                  az webapp create \
                    --name $(webAppName) \
                    --resource-group $(resourceGroupName) \
                    --plan $(appServicePlan) \
                    --runtime "PYTHON:3.11" \
                    --tags \
                      Project="TiroEsportivoBrasileiro" \
                      Environment="Production"
                  
                  # Configurar vari√°veis de ambiente b√°sicas
                  az webapp config appsettings set \
                    --name $(webAppName) \
                    --resource-group $(resourceGroupName) \
                    --settings \
                      FLASK_ENV=production \
                      CUSTOM_DOMAIN="$(domainName)" \
                      AZURE_DNS_ENABLED=true \
                      FORCE_HTTPS=true \
                      SCM_DO_BUILD_DURING_DEPLOYMENT=true \
                      ENABLE_ORYX_BUILD=true \
                      WEBSITES_ENABLE_APP_SERVICE_STORAGE=true
                  
                  # Configurar startup command
                  az webapp config set \
                    --name $(webAppName) \
                    --resource-group $(resourceGroupName) \
                    --startup-file "startup.py"
                  
                  echo "‚úÖ Web App de produ√ß√£o criada!"
                else
                  echo "‚úÖ Web App de produ√ß√£o j√° existe."
                fi
                
                # 6. Criar Web App de Desenvolvimento
                echo "Criando Web App de desenvolvimento..."
                if ! az webapp show --name $(webAppNameDev) --resource-group $(resourceGroupName) &> /dev/null; then
                  az webapp create \
                    --name $(webAppNameDev) \
                    --resource-group $(resourceGroupName) \
                    --plan $(appServicePlan) \
                    --runtime "PYTHON:3.11" \
                    --tags \
                      Project="TiroEsportivoBrasileiro" \
                      Environment="Development"
                  
                  # Configurar vari√°veis de ambiente para desenvolvimento
                  az webapp config appsettings set \
                    --name $(webAppNameDev) \
                    --resource-group $(resourceGroupName) \
                    --settings \
                      FLASK_ENV=development \
                      CUSTOM_DOMAIN="$(webAppNameDev).azurewebsites.net" \
                      AZURE_DNS_ENABLED=false \
                      SCM_DO_BUILD_DURING_DEPLOYMENT=true \
                      ENABLE_ORYX_BUILD=true
                  
                  # Configurar startup command
                  az webapp config set \
                    --name $(webAppNameDev) \
                    --resource-group $(resourceGroupName) \
                    --startup-file "startup.py"
                  
                  echo "‚úÖ Web App de desenvolvimento criada!"
                else
                  echo "‚úÖ Web App de desenvolvimento j√° existe."
                fi
                
                echo ""
                echo "üéâ Infraestrutura criada com sucesso!"
                echo ""
                echo "üìä Resumo dos recursos criados:"
                echo "- Resource Group: $(resourceGroupName)"
                echo "- DNS Zone: $(domainName)"
                echo "- App Service Plan: $(appServicePlan)"
                echo "- Web App Produ√ß√£o: $(webAppName)"
                echo "- Web App Desenvolvimento: $(webAppNameDev)"
                echo ""
                echo "üåê URLs:"
                echo "- Produ√ß√£o: https://$(domainName) (ap√≥s configurar DNS)"
                echo "- Desenvolvimento: https://$(webAppNameDev).azurewebsites.net"
                echo ""
            displayName: 'Create Base Infrastructure'
          
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "üîí Configurando seguran√ßa e monitoramento..."
                
                # Configurar Application Insights
                echo "Criando Application Insights..."
                if ! az monitor app-insights component show --app "tiroesportivo-insights" --resource-group $(resourceGroupName) &> /dev/null; then
                  az monitor app-insights component create \
                    --app "tiroesportivo-insights" \
                    --location "$(location)" \
                    --resource-group $(resourceGroupName) \
                    --application-type web \
                    --tags \
                      Project="TiroEsportivoBrasileiro" \
                      Environment="Production"
                  
                  # Obter Instrumentation Key
                  INSTRUMENTATION_KEY=$(az monitor app-insights component show \
                    --app "tiroesportivo-insights" \
                    --resource-group $(resourceGroupName) \
                    --query "instrumentationKey" -o tsv)
                  
                  # Configurar Application Insights nas Web Apps
                  az webapp config appsettings set \
                    --name $(webAppName) \
                    --resource-group $(resourceGroupName) \
                    --settings APPINSIGHTS_INSTRUMENTATIONKEY="$INSTRUMENTATION_KEY"
                  
                  az webapp config appsettings set \
                    --name $(webAppNameDev) \
                    --resource-group $(resourceGroupName) \
                    --settings APPINSIGHTS_INSTRUMENTATIONKEY="$INSTRUMENTATION_KEY"
                  
                  echo "‚úÖ Application Insights configurado!"
                else
                  echo "‚úÖ Application Insights j√° existe."
                fi
                
                # Configurar alertas b√°sicos
                echo "Configurando alertas de monitoramento..."
                
                # Alerta para alta utiliza√ß√£o de CPU
                az monitor metrics alert create \
                  --name "High-CPU-$(webAppName)" \
                  --resource-group $(resourceGroupName) \
                  --scopes "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$(resourceGroupName)/providers/Microsoft.Web/sites/$(webAppName)" \
                  --condition "avg Percentage CPU > 80" \
                  --description "Alerta quando CPU > 80%" \
                  --evaluation-frequency 5m \
                  --window-size 15m \
                  --severity 2 || echo "Alerta de CPU j√° existe ou erro na cria√ß√£o"
                
                # Alerta para falhas HTTP
                az monitor metrics alert create \
                  --name "HTTP-Errors-$(webAppName)" \
                  --resource-group $(resourceGroupName) \
                  --scopes "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$(resourceGroupName)/providers/Microsoft.Web/sites/$(webAppName)" \
                  --condition "total Http5xx > 10" \
                  --description "Alerta quando HTTP 5xx > 10" \
                  --evaluation-frequency 5m \
                  --window-size 15m \
                  --severity 1 || echo "Alerta de HTTP j√° existe ou erro na cria√ß√£o"
                
                echo "‚úÖ Alertas de monitoramento configurados!"
                
                # Configurar backup autom√°tico (se suportado pelo plano)
                echo "Configurando backup autom√°tico..."
                # Nota: Backup autom√°tico requer plano Standard ou superior
                # az webapp config backup create seria usado aqui
                
                echo "üîí Configura√ß√µes de seguran√ßa e monitoramento conclu√≠das!"
            displayName: 'Configure Security and Monitoring'

- stage: ValidateDeployment
  displayName: 'Validate Deployment'
  dependsOn: DeployInfrastructure
  jobs:
  - job: ValidateInfra
    displayName: 'Validate Infrastructure Deployment'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üîç Validando infraestrutura deployada..."
          
          # Verificar Resource Group
          if az group show --name $(resourceGroupName) &> /dev/null; then
            echo "‚úÖ Resource Group: $(resourceGroupName)"
          else
            echo "‚ùå Resource Group n√£o encontrado!"
            exit 1
          fi
          
          # Verificar DNS Zone
          if az network dns zone show --resource-group $(resourceGroupName) --name $(domainName) &> /dev/null; then
            echo "‚úÖ DNS Zone: $(domainName)"
            
            # Mostrar Name Servers
            echo "üìã Name Servers:"
            az network dns zone show --resource-group $(resourceGroupName) --name $(domainName) --query "nameServers" -o table
          else
            echo "‚ùå DNS Zone n√£o encontrada!"
            exit 1
          fi
          
          # Verificar App Service Plan
          if az appservice plan show --name $(appServicePlan) --resource-group $(resourceGroupName) &> /dev/null; then
            echo "‚úÖ App Service Plan: $(appServicePlan)"
            
            # Mostrar detalhes do plano
            az appservice plan show --name $(appServicePlan) --resource-group $(resourceGroupName) --query "{name:name,sku:sku.name,location:location}" -o table
          else
            echo "‚ùå App Service Plan n√£o encontrado!"
            exit 1
          fi
          
          # Verificar Web Apps
          if az webapp show --name $(webAppName) --resource-group $(resourceGroupName) &> /dev/null; then
            echo "‚úÖ Web App Produ√ß√£o: $(webAppName)"
            
            # Mostrar URL
            PROD_URL=$(az webapp show --name $(webAppName) --resource-group $(resourceGroupName) --query "defaultHostName" -o tsv)
            echo "   URL: https://$PROD_URL"
          else
            echo "‚ùå Web App de produ√ß√£o n√£o encontrada!"
            exit 1
          fi
          
          if az webapp show --name $(webAppNameDev) --resource-group $(resourceGroupName) &> /dev/null; then
            echo "‚úÖ Web App Desenvolvimento: $(webAppNameDev)"
            
            # Mostrar URL
            DEV_URL=$(az webapp show --name $(webAppNameDev) --resource-group $(resourceGroupName) --query "defaultHostName" -o tsv)
            echo "   URL: https://$DEV_URL"
          else
            echo "‚ùå Web App de desenvolvimento n√£o encontrada!"
            exit 1
          fi
          
          # Verificar Application Insights
          if az monitor app-insights component show --app "tiroesportivo-insights" --resource-group $(resourceGroupName) &> /dev/null; then
            echo "‚úÖ Application Insights: tiroesportivo-insights"
          else
            echo "‚ö†Ô∏è Application Insights n√£o encontrado (pode ter falhado na cria√ß√£o)"
          fi
          
          echo ""
          echo "üéâ Valida√ß√£o da infraestrutura conclu√≠da com sucesso!"
          echo ""
          echo "üìä Resumo final:"
          echo "- Resource Group: $(resourceGroupName)"
          echo "- DNS Zone: $(domainName)"
          echo "- App Service Plan: $(appServicePlan) ($(sku))"
          echo "- Web App Produ√ß√£o: https://$PROD_URL"
          echo "- Web App Desenvolvimento: https://$DEV_URL"
          echo "- Application Insights: Configurado"
          echo ""
          echo "üîß Pr√≥ximos passos:"
          echo "1. Configure os Name Servers no registrador do dom√≠nio"
          echo "2. Execute o pipeline de aplica√ß√£o para fazer deploy do c√≥digo"
          echo "3. Configure dom√≠nio personalizado e SSL ap√≥s propaga√ß√£o DNS"
      displayName: 'Validate All Infrastructure Components'

