# Script de Deploy para Azure Web App com Dom√≠nio Personalizado
# Tiro Esportivo Brasileiro - TIROESPORTIVOBRASILEIRO.COM.BR

param(
    [Parameter(Mandatory=$false)]
    [string]$ResourceGroupName = "tiroesportivo-rg",
    
    [Parameter(Mandatory=$false)]
    [string]$WebAppName = "tiroesportivobrasileiro",
    
    [Parameter(Mandatory=$false)]
    [string]$Location = "East US",
    
    [Parameter(Mandatory=$false)]
    [string]$AppServicePlan = "tiroesportivo-plan",
    
    [Parameter(Mandatory=$false)]
    [string]$CustomDomain = "tiroesportivobrasileiro.com.br",
    
    [Parameter(Mandatory=$false)]
    [string]$Sku = "S1"
)

Write-Host "üéØ Deploy - Tiro Esportivo Brasileiro" -ForegroundColor Green
Write-Host "üåê Dom√≠nio: $CustomDomain" -ForegroundColor Cyan
Write-Host ""

# Verificar se Azure CLI est√° instalado
try {
    az --version | Out-Null
    Write-Host "‚úÖ Azure CLI encontrado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Azure CLI n√£o encontrado. Instale em: https://docs.microsoft.com/cli/azure/install-azure-cli" -ForegroundColor Red
    exit 1
}

# Login no Azure (se necess√°rio)
Write-Host "üîê Verificando login no Azure..." -ForegroundColor Yellow
$account = az account show --query "user.name" -o tsv 2>$null
if (-not $account) {
    Write-Host "Fazendo login no Azure..." -ForegroundColor Yellow
    az login
    $account = az account show --query "user.name" -o tsv
}

Write-Host "‚úÖ Logado como: $account" -ForegroundColor Green

# Criar Resource Group
Write-Host "üì¶ Criando Resource Group: $ResourceGroupName" -ForegroundColor Yellow
az group create --name $ResourceGroupName --location $Location

# Criar App Service Plan (S1 para suportar dom√≠nio personalizado)
Write-Host "üèóÔ∏è Criando App Service Plan: $AppServicePlan (SKU: $Sku)" -ForegroundColor Yellow
az appservice plan create `
    --name $AppServicePlan `
    --resource-group $ResourceGroupName `
    --location $Location `
    --sku $Sku `
    --is-linux

# Criar Web App
Write-Host "üåê Criando Web App: $WebAppName" -ForegroundColor Yellow
az webapp create `
    --name $WebAppName `
    --resource-group $ResourceGroupName `
    --plan $AppServicePlan `
    --runtime "PYTHON:3.11"

# Configurar vari√°veis de ambiente
Write-Host "‚öôÔ∏è Configurando vari√°veis de ambiente..." -ForegroundColor Yellow
az webapp config appsettings set `
    --name $WebAppName `
    --resource-group $ResourceGroupName `
    --settings `
        FLASK_ENV=production `
        SECRET_KEY="tiroesportivobrasileiro-azure-secret-key-2024" `
        CUSTOM_DOMAIN=$CustomDomain `
        FORCE_HTTPS=true `
        SCM_DO_BUILD_DURING_DEPLOYMENT=true `
        ENABLE_ORYX_BUILD=true `
        WEBSITES_ENABLE_APP_SERVICE_STORAGE=true

# Configurar startup command
Write-Host "üöÄ Configurando comando de inicializa√ß√£o..." -ForegroundColor Yellow
az webapp config set `
    --name $WebAppName `
    --resource-group $ResourceGroupName `
    --startup-file "startup.py"

# Deploy do c√≥digo
Write-Host "üì§ Fazendo deploy do c√≥digo..." -ForegroundColor Yellow
$currentDir = Get-Location
az webapp deployment source config-zip `
    --name $WebAppName `
    --resource-group $ResourceGroupName `
    --src "$currentDir\tiroesportivobrasileiro.zip"

# Aguardar deploy
Write-Host "‚è≥ Aguardando conclus√£o do deploy..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# Obter URL tempor√°ria
$tempUrl = az webapp show --name $WebAppName --resource-group $ResourceGroupName --query "defaultHostName" -o tsv
$tempFullUrl = "https://$tempUrl"

Write-Host ""
Write-Host "‚úÖ Deploy inicial conclu√≠do!" -ForegroundColor Green
Write-Host "üåê URL tempor√°ria: $tempFullUrl" -ForegroundColor Cyan

# Configurar dom√≠nio personalizado
Write-Host ""
Write-Host "üîß Configurando dom√≠nio personalizado..." -ForegroundColor Yellow

# Obter ID de verifica√ß√£o de dom√≠nio
$verificationId = az webapp show `
    --name $WebAppName `
    --resource-group $ResourceGroupName `
    --query "customDomainVerificationId" -o tsv

Write-Host "üìã ID de Verifica√ß√£o de Dom√≠nio: $verificationId" -ForegroundColor Cyan
Write-Host ""
Write-Host "‚ö†Ô∏è  IMPORTANTE: Configure os seguintes registros DNS:" -ForegroundColor Red
Write-Host "   Tipo: TXT" -ForegroundColor White
Write-Host "   Nome: asuid" -ForegroundColor White
Write-Host "   Valor: $verificationId" -ForegroundColor White
Write-Host ""
Write-Host "   Tipo: CNAME" -ForegroundColor White
Write-Host "   Nome: @" -ForegroundColor White
Write-Host "   Valor: $tempUrl" -ForegroundColor White
Write-Host ""

# Perguntar se DNS foi configurado
$dnsConfigured = Read-Host "DNS foi configurado? Aguarde a propaga√ß√£o e digite 'y' para continuar (y/n)"

if ($dnsConfigured -eq "y" -or $dnsConfigured -eq "Y") {
    Write-Host "üåê Adicionando dom√≠nio personalizado..." -ForegroundColor Yellow
    
    try {
        # Adicionar dom√≠nio personalizado
        az webapp config hostname add `
            --webapp-name $WebAppName `
            --resource-group $ResourceGroupName `
            --hostname $CustomDomain
        
        Write-Host "‚úÖ Dom√≠nio personalizado adicionado!" -ForegroundColor Green
        
        # Configurar SSL
        Write-Host "üîí Configurando certificado SSL..." -ForegroundColor Yellow
        
        # Aguardar um pouco para o dom√≠nio ser reconhecido
        Start-Sleep -Seconds 30
        
        # Criar certificado gerenciado
        az webapp config ssl create `
            --resource-group $ResourceGroupName `
            --name $WebAppName `
            --hostname $CustomDomain
        
        # Obter thumbprint do certificado
        $thumbprint = az webapp config ssl list `
            --resource-group $ResourceGroupName `
            --query "[?subjectName=='$CustomDomain'].thumbprint" `
            --output tsv
        
        if ($thumbprint) {
            # Vincular certificado
            az webapp config ssl bind `
                --resource-group $ResourceGroupName `
                --name $WebAppName `
                --certificate-thumbprint $thumbprint `
                --ssl-type SNI
            
            Write-Host "‚úÖ SSL configurado com sucesso!" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  Certificado SSL n√£o p√¥de ser criado automaticamente." -ForegroundColor Yellow
            Write-Host "   Configure manualmente no Portal Azure." -ForegroundColor White
        }
        
    } catch {
        Write-Host "‚ö†Ô∏è  Erro ao configurar dom√≠nio personalizado: $($_.Exception.Message)" -ForegroundColor Yellow
        Write-Host "   Configure manualmente no Portal Azure." -ForegroundColor White
    }
}

# URLs finais
$customUrl = "https://$CustomDomain"

Write-Host ""
Write-Host "üéâ Deploy conclu√≠do com sucesso!" -ForegroundColor Green
Write-Host "üåê URL principal: $customUrl" -ForegroundColor Cyan
Write-Host "üåê URL tempor√°ria: $tempFullUrl" -ForegroundColor Cyan
Write-Host ""
Write-Host "üë§ Credenciais de acesso:" -ForegroundColor Yellow
Write-Host "   - Demo: demo / demo123" -ForegroundColor White
Write-Host "   - Admin: admin / admin123" -ForegroundColor White
Write-Host ""
Write-Host "üìä Para monitorar a aplica√ß√£o:" -ForegroundColor Yellow
Write-Host "   az webapp log tail --name $WebAppName --resource-group $ResourceGroupName" -ForegroundColor White
Write-Host ""
Write-Host "üîß Para configurar SSL manualmente:" -ForegroundColor Yellow
Write-Host "   1. Acesse portal.azure.com" -ForegroundColor White
Write-Host "   2. V√° para sua Web App > TLS/SSL settings" -ForegroundColor White
Write-Host "   3. Crie um certificado gerenciado" -ForegroundColor White
Write-Host "   4. Vincule ao dom√≠nio $CustomDomain" -ForegroundColor White
Write-Host ""

# Abrir aplica√ß√£o no navegador
$openBrowser = Read-Host "Deseja abrir a aplica√ß√£o no navegador? (y/n)"
if ($openBrowser -eq "y" -or $openBrowser -eq "Y") {
    if ($dnsConfigured -eq "y" -or $dnsConfigured -eq "Y") {
        Start-Process $customUrl
    } else {
        Start-Process $tempFullUrl
    }
}

